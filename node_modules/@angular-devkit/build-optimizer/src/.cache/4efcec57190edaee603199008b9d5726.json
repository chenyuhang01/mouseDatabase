{"remainingRequest":"C:\\Users\\Fu Nai Yang's Lab\\Documents\\GitHub\\mouseDatabase\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Fu Nai Yang's Lab\\Documents\\GitHub\\mouseDatabase\\node_modules\\angular2-image-upload\\lib\\file-drop.directive.js","dependencies":[{"path":"C:\\Users\\Fu Nai Yang's Lab\\Documents\\GitHub\\mouseDatabase\\node_modules\\angular2-image-upload\\lib\\file-drop.directive.js","mtime":1528996064189},{"path":"C:\\Users\\Fu Nai Yang's Lab\\Documents\\GitHub\\mouseDatabase\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1528996067508},{"path":"C:\\Users\\Fu Nai Yang's Lab\\Documents\\GitHub\\mouseDatabase\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528996048208}],"contextDependencies":[],"result":["\"use strict\";\nvar core_1 = require(\"@angular/core\");\nvar FileDropDirective = /*@__PURE__*/ (function () {\n    function FileDropDirective() {\n        this.fileOver = new core_1.EventEmitter();\n        this.fileDrop = new core_1.EventEmitter();\n    }\n    FileDropDirective.prototype.onDrop = function (event) {\n        var dataTransfer = FileDropDirective.getDataTransfer(event);\n        if (!FileDropDirective.hasFiles(dataTransfer.types)) {\n            return;\n        }\n        event.preventDefault();\n        var files = this.filterFiles(dataTransfer.files);\n        event.preventDefault();\n        this.fileOver.emit(false);\n        this.fileDrop.emit(files);\n    };\n    FileDropDirective.prototype.onDragLeave = function (event) {\n        this.fileOver.emit(false);\n    };\n    FileDropDirective.prototype.onDragOver = function (event) {\n        var dataTransfer = FileDropDirective.getDataTransfer(event);\n        if (!FileDropDirective.hasFiles(dataTransfer.types)) {\n            return;\n        }\n        dataTransfer.dropEffect = 'copy';\n        event.preventDefault();\n        this.fileOver.emit(true);\n    };\n    FileDropDirective.prototype.filterFiles = function (files) {\n        if (!this.accept || this.accept.length === 0) {\n            return files;\n        }\n        var acceptedFiles = [];\n        for (var i = 0; i < files.length; i++) {\n            for (var j = 0; j < this.accept.length; j++) {\n                if (FileDropDirective.matchRule(this.accept[j], files[i].type)) {\n                    acceptedFiles.push(files[i]);\n                    break;\n                }\n            }\n        }\n        return acceptedFiles;\n    };\n    FileDropDirective.getDataTransfer = function (event) {\n        return event.dataTransfer ? event.dataTransfer : event.originalEvent.dataTransfer;\n    };\n    FileDropDirective.hasFiles = function (types) {\n        if (!types) {\n            return false;\n        }\n        if (types.indexOf) {\n            return types.indexOf('Files') !== -1;\n        }\n        if (types.contains) {\n            return types.contains('Files');\n        }\n        return false;\n    };\n    FileDropDirective.matchRule = function (rule, candidate) {\n        return new RegExp(\"^\" + rule.split(\"*\").join(\".*\") + \"$\").test(candidate);\n    };\n    FileDropDirective.decorators = [\n        { type: core_1.Directive, args: [{\n                    selector: '[fileDrop]'\n                },] },\n    ];\n    FileDropDirective.propDecorators = {\n        'accept': [{ type: core_1.Input },],\n        'fileOver': [{ type: core_1.Output },],\n        'fileDrop': [{ type: core_1.Output },],\n        'onDrop': [{ type: core_1.HostListener, args: ['drop', ['$event'],] },],\n        'onDragLeave': [{ type: core_1.HostListener, args: ['dragleave', ['$event'],] },],\n        'onDragOver': [{ type: core_1.HostListener, args: ['dragover', ['$event'],] },],\n    };\n    return FileDropDirective;\n}());\nexports.FileDropDirective = FileDropDirective;\n",null]}