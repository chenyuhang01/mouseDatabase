{"remainingRequest":"C:\\Users\\Fu Nai Yang's Lab\\Documents\\GitHub\\mouseDatabase\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Fu Nai Yang's Lab\\Documents\\GitHub\\mouseDatabase\\node_modules\\ng-lazyload-image\\src\\lazyload-image.js","dependencies":[{"path":"C:\\Users\\Fu Nai Yang's Lab\\Documents\\GitHub\\mouseDatabase\\node_modules\\ng-lazyload-image\\src\\lazyload-image.js","mtime":1528996281354},{"path":"C:\\Users\\Fu Nai Yang's Lab\\Documents\\GitHub\\mouseDatabase\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1528996067508},{"path":"C:\\Users\\Fu Nai Yang's Lab\\Documents\\GitHub\\mouseDatabase\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528996048208}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar operators_1 = require(\"rxjs/operators\");\r\nvar rxjs_1 = require(\"rxjs\");\r\nvar rect_1 = require(\"./rect\");\r\nvar constants_1 = require(\"./constants\");\r\nvar utils_1 = require(\"./utils\");\r\nfunction isVisible(element, threshold, _window, scrollContainer) {\r\n    if (threshold === void 0) { threshold = 0; }\r\n    var elementBounds = rect_1.Rect.fromElement(element);\r\n    if (elementBounds === rect_1.Rect.empty) {\r\n        return false;\r\n    }\r\n    var windowBounds = rect_1.Rect.fromWindow(_window);\r\n    elementBounds.inflate(threshold);\r\n    if (scrollContainer) {\r\n        var scrollContainerBounds = rect_1.Rect.fromElement(scrollContainer);\r\n        var intersection = scrollContainerBounds.getIntersectionWith(windowBounds);\r\n        return elementBounds.intersectsWith(intersection);\r\n    }\r\n    else {\r\n        return elementBounds.intersectsWith(windowBounds);\r\n    }\r\n}\r\nexports.isVisible = isVisible;\r\nfunction isChildOfPicture(element) {\r\n    return Boolean(element.parentElement && element.parentElement.nodeName.toLowerCase() === 'picture');\r\n}\r\nexports.isChildOfPicture = isChildOfPicture;\r\nfunction isImageElement(element) {\r\n    return element.nodeName.toLowerCase() === 'img';\r\n}\r\nexports.isImageElement = isImageElement;\r\nfunction loadImage(element, imagePath, useSrcset) {\r\n    var img;\r\n    if (isImageElement(element) && isChildOfPicture(element)) {\r\n        var parentClone = element.parentNode.cloneNode(true);\r\n        img = parentClone.getElementsByTagName('img')[0];\r\n        setSourcesToLazy(img);\r\n        setImage(img, imagePath, useSrcset);\r\n    }\r\n    else {\r\n        img = new Image();\r\n        if (isImageElement(element) && element.sizes) {\r\n            img.sizes = element.sizes;\r\n        }\r\n        if (useSrcset) {\r\n            img.srcset = imagePath;\r\n        }\r\n        else {\r\n            img.src = imagePath;\r\n        }\r\n    }\r\n    return rxjs_1.Observable\r\n        .create(function (observer) {\r\n        img.onload = function () {\r\n            observer.next(imagePath);\r\n            observer.complete();\r\n        };\r\n        img.onerror = function (err) {\r\n            observer.error(null);\r\n        };\r\n    });\r\n}\r\nfunction setImage(element, imagePath, useSrcset) {\r\n    if (isImageElement(element)) {\r\n        if (useSrcset) {\r\n            element.srcset = imagePath;\r\n        }\r\n        else {\r\n            element.src = imagePath;\r\n        }\r\n    }\r\n    else {\r\n        element.style.backgroundImage = \"url('\" + imagePath + \"')\";\r\n    }\r\n    return element;\r\n}\r\nfunction setSources(attrName) {\r\n    return function (image) {\r\n        var sources = image.parentElement.getElementsByTagName('source');\r\n        for (var i = 0; i < sources.length; i++) {\r\n            var attrValue = sources[i].getAttribute(attrName);\r\n            if (attrValue) {\r\n                sources[i].srcset = attrValue;\r\n            }\r\n        }\r\n    };\r\n}\r\nvar setSourcesToDefault = setSources('defaultImage');\r\nvar setSourcesToLazy = setSources('lazyLoad');\r\nvar setSourcesToError = setSources('errorImage');\r\nfunction setImageAndSources(setSourcesFn) {\r\n    return function (element, imagePath, useSrcset) {\r\n        if (isImageElement(element) && isChildOfPicture(element)) {\r\n            setSourcesFn(element);\r\n        }\r\n        if (imagePath) {\r\n            setImage(element, imagePath, useSrcset);\r\n        }\r\n    };\r\n}\r\nvar setImageAndSourcesToDefault = setImageAndSources(setSourcesToDefault);\r\nvar setImageAndSourcesToLazy = setImageAndSources(setSourcesToLazy);\r\nvar setImageAndSourcesToError = setImageAndSources(setSourcesToError);\r\nfunction lazyLoadImage(element, imagePath, defaultImagePath, errorImgPath, offset, useSrcset, scrollContainer) {\r\n    if (useSrcset === void 0) { useSrcset = false; }\r\n    setImageAndSourcesToDefault(element, defaultImagePath, useSrcset);\r\n    if (utils_1.hasCssClassName(element, constants_1.cssClassNames.loaded)) {\r\n        utils_1.removeCssClassName(element, constants_1.cssClassNames.loaded);\r\n    }\r\n    return function (scrollObservable) {\r\n        return scrollObservable.pipe(operators_1.filter(function () { return isVisible(element, offset, window, scrollContainer); }), operators_1.take(1), operators_1.mergeMap(function () { return loadImage(element, imagePath, useSrcset); }), operators_1.tap(function () { return setImageAndSourcesToLazy(element, imagePath, useSrcset); }), operators_1.map(function () { return true; }), operators_1.catchError(function () {\r\n            setImageAndSourcesToError(element, errorImgPath, useSrcset);\r\n            utils_1.addCssClassName(element, constants_1.cssClassNames.failed);\r\n            return rxjs_1.of(false);\r\n        }), operators_1.tap(function () { return utils_1.addCssClassName(element, constants_1.cssClassNames.loaded); }));\r\n    };\r\n}\r\nexports.lazyLoadImage = lazyLoadImage;\r\n//# sourceMappingURL=lazyload-image.js.map",null]}