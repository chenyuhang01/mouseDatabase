{"remainingRequest":"C:\\Users\\Fu Nai Yang's Lab\\Documents\\GitHub\\mouseDatabase\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Fu Nai Yang's Lab\\Documents\\GitHub\\mouseDatabase\\node_modules\\ng-lazyload-image\\src\\scroll-listener.js","dependencies":[{"path":"C:\\Users\\Fu Nai Yang's Lab\\Documents\\GitHub\\mouseDatabase\\node_modules\\ng-lazyload-image\\src\\scroll-listener.js","mtime":1528996281363},{"path":"C:\\Users\\Fu Nai Yang's Lab\\Documents\\GitHub\\mouseDatabase\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1528996067508},{"path":"C:\\Users\\Fu Nai Yang's Lab\\Documents\\GitHub\\mouseDatabase\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528996048208}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar operators_1 = require(\"rxjs/operators\");\r\nvar rxjs_1 = require(\"rxjs\");\r\nvar utils_1 = require(\"./utils\");\r\nvar scrollListeners = new WeakMap();\r\nfunction sampleObservable(obs, scheduler) {\r\n    return obs.pipe(operators_1.sampleTime(100, scheduler), operators_1.share(), operators_1.startWith(''));\r\n}\r\nexports.sampleObservable = sampleObservable;\r\nexports.getScrollListener = function (scrollTarget) {\r\n    if (!scrollTarget || typeof scrollTarget.addEventListener !== 'function') {\r\n        if (utils_1.isWindowDefined()) {\r\n            console.warn('`addEventListener` on ' + scrollTarget + ' (scrollTarget) is not a function. Skipping this target');\r\n        }\r\n        return rxjs_1.empty();\r\n    }\r\n    if (scrollListeners.has(scrollTarget)) {\r\n        return scrollListeners.get(scrollTarget);\r\n    }\r\n    var srollEvent = rxjs_1.Observable.create(function (observer) {\r\n        var eventName = 'scroll';\r\n        var handler = function (event) { return observer.next(event); };\r\n        var options = { passive: true, capture: false };\r\n        scrollTarget.addEventListener(eventName, handler, options);\r\n        return function () { return scrollTarget.removeEventListener(eventName, handler, options); };\r\n    });\r\n    var listener = sampleObservable(srollEvent);\r\n    scrollListeners.set(scrollTarget, listener);\r\n    return listener;\r\n};\r\n//# sourceMappingURL=scroll-listener.js.map",null]}