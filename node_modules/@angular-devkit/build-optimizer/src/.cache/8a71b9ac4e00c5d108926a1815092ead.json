{"remainingRequest":"C:\\Users\\Fu Nai Yang's Lab\\Documents\\GitHub\\mouseDatabase\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Fu Nai Yang's Lab\\Documents\\GitHub\\mouseDatabase\\node_modules\\ng-lazyload-image\\src\\rect.js","dependencies":[{"path":"C:\\Users\\Fu Nai Yang's Lab\\Documents\\GitHub\\mouseDatabase\\node_modules\\ng-lazyload-image\\src\\rect.js","mtime":1528996281360},{"path":"C:\\Users\\Fu Nai Yang's Lab\\Documents\\GitHub\\mouseDatabase\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1528996067508},{"path":"C:\\Users\\Fu Nai Yang's Lab\\Documents\\GitHub\\mouseDatabase\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528996048208}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Rect = /*@__PURE__*/ (function () {\r\n    function Rect(left, top, right, bottom) {\r\n        this.left = left;\r\n        this.top = top;\r\n        this.right = right;\r\n        this.bottom = bottom;\r\n    }\r\n    Rect.fromElement = function (element) {\r\n        var _a = element.getBoundingClientRect(), left = _a.left, top = _a.top, right = _a.right, bottom = _a.bottom;\r\n        if (left === 0 && top === 0 && right === 0 && bottom === 0) {\r\n            return Rect.empty;\r\n        }\r\n        else {\r\n            return new Rect(left, top, right, bottom);\r\n        }\r\n    };\r\n    Rect.fromWindow = function (_window) {\r\n        return new Rect(0, 0, _window.innerWidth, _window.innerHeight);\r\n    };\r\n    Rect.prototype.inflate = function (inflateBy) {\r\n        this.left -= inflateBy;\r\n        this.top -= inflateBy;\r\n        this.right += inflateBy;\r\n        this.bottom += inflateBy;\r\n    };\r\n    Rect.prototype.intersectsWith = function (rect) {\r\n        return (rect.left < this.right) &&\r\n            (this.left < rect.right) &&\r\n            (rect.top < this.bottom) &&\r\n            (this.top < rect.bottom);\r\n    };\r\n    Rect.prototype.getIntersectionWith = function (rect) {\r\n        var left = Math.max(this.left, rect.left);\r\n        var top = Math.max(this.top, rect.top);\r\n        var right = Math.min(this.right, rect.right);\r\n        var bottom = Math.min(this.bottom, rect.bottom);\r\n        if (right >= left && bottom >= top) {\r\n            return new Rect(left, top, right, bottom);\r\n        }\r\n        else {\r\n            return Rect.empty;\r\n        }\r\n    };\r\n    Rect.empty = new Rect(0, 0, 0, 0);\r\n    return Rect;\r\n}());\r\nexports.Rect = Rect;\r\n",null]}