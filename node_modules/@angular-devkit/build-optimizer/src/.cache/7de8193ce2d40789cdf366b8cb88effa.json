{"remainingRequest":"C:\\Users\\Fu Nai Yang's Lab\\Documents\\GitHub\\mouseDatabase\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Fu Nai Yang's Lab\\Documents\\GitHub\\mouseDatabase\\node_modules\\angular2-image-upload\\lib\\image-upload\\image-upload.component.js","dependencies":[{"path":"C:\\Users\\Fu Nai Yang's Lab\\Documents\\GitHub\\mouseDatabase\\node_modules\\angular2-image-upload\\lib\\image-upload\\image-upload.component.js","mtime":1528996064195},{"path":"C:\\Users\\Fu Nai Yang's Lab\\Documents\\GitHub\\mouseDatabase\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1528996067508},{"path":"C:\\Users\\Fu Nai Yang's Lab\\Documents\\GitHub\\mouseDatabase\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528996048208}],"contextDependencies":[],"result":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try {\n            step(generator.next(value));\n        }\n        catch (e) {\n            reject(e);\n        } }\n        function rejected(value) { try {\n            step(generator[\"throw\"](value));\n        }\n        catch (e) {\n            reject(e);\n        } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function () { if (t[0] & 1)\n            throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;\n    return { next: verb(0), \"throw\": verb(1), \"return\": verb(2) };\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f)\n            throw new TypeError(\"Generator is already executing.\");\n        while (_)\n            try {\n                if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done)\n                    return t;\n                if (y = 0, t)\n                    op = [0, t.value];\n                switch (op[0]) {\n                    case 0:\n                    case 1:\n                        t = op;\n                        break;\n                    case 4:\n                        _.label++;\n                        return { value: op[1], done: false };\n                    case 5:\n                        _.label++;\n                        y = op[1];\n                        op = [0];\n                        continue;\n                    case 7:\n                        op = _.ops.pop();\n                        _.trys.pop();\n                        continue;\n                    default:\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                            _ = 0;\n                            continue;\n                        }\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {\n                            _.label = op[1];\n                            break;\n                        }\n                        if (op[0] === 6 && _.label < t[1]) {\n                            _.label = t[1];\n                            t = op;\n                            break;\n                        }\n                        if (t && _.label < t[2]) {\n                            _.label = t[2];\n                            _.ops.push(op);\n                            break;\n                        }\n                        if (t[2])\n                            _.ops.pop();\n                        _.trys.pop();\n                        continue;\n                }\n                op = body.call(thisArg, _);\n            }\n            catch (e) {\n                op = [6, e];\n                y = 0;\n            }\n            finally {\n                f = t = 0;\n            }\n        if (op[0] & 5)\n            throw op[1];\n        return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar core_1 = require(\"@angular/core\");\nvar image_service_1 = require(\"./image.service\");\nvar FileHolder = /*@__PURE__*/ (function () {\n    function FileHolder(src, file) {\n        this.src = src;\n        this.file = file;\n        this.pending = false;\n    }\n    return FileHolder;\n}());\nexports.FileHolder = FileHolder;\nvar ImageUploadComponent = /*@__PURE__*/ (function () {\n    function ImageUploadComponent(imageService) {\n        var _this = this;\n        this.imageService = imageService;\n        this.files = [];\n        this.fileCounter = 0;\n        this.fileOver = false;\n        this.showFileTooLargeMessage = false;\n        this.beforeUpload = function (data) { return data; };\n        this.buttonCaption = 'Select Images';\n        this.disabled = false;\n        this.cssClass = 'img-ul';\n        this.clearButtonCaption = 'Clear';\n        this.dropBoxMessage = 'Drop your images here!';\n        this.max = 100;\n        this.preview = true;\n        this.withCredentials = false;\n        this.uploadedFiles = [];\n        this.removed = new core_1.EventEmitter();\n        this.uploadStateChanged = new core_1.EventEmitter();\n        this.uploadFinished = new core_1.EventEmitter();\n        this.previewClicked = new core_1.EventEmitter();\n        this.pendingFilesCounter = 0;\n        this.onFileOver = function (isOver) { return _this.fileOver = isOver; };\n        this.countRemainingSlots = function () { return _this.max - _this.fileCounter; };\n    }\n    ImageUploadComponent.prototype.ngOnInit = function () {\n        if (!this.fileTooLargeMessage) {\n            this.fileTooLargeMessage = 'An image was too large and was not uploaded.' + (this.maxFileSize ? (' The maximum file size is ' + this.maxFileSize / 1024) + 'KiB.' : '');\n        }\n        this.supportedExtensions = this.supportedExtensions ? this.supportedExtensions.map(function (ext) { return 'image/' + ext; }) : ['image/*'];\n    };\n    ImageUploadComponent.prototype.deleteAll = function () {\n        var _this = this;\n        this.files.forEach(function (f) { return _this.removed.emit(f); });\n        this.files = [];\n        this.fileCounter = 0;\n        this.inputElement.nativeElement.value = '';\n    };\n    ImageUploadComponent.prototype.deleteFile = function (file) {\n        var index = this.files.indexOf(file);\n        this.files.splice(index, 1);\n        this.fileCounter--;\n        this.inputElement.nativeElement.value = '';\n        this.removed.emit(file);\n    };\n    ImageUploadComponent.prototype.previewFileClicked = function (file) {\n        this.previewClicked.emit(file);\n    };\n    ImageUploadComponent.prototype.ngOnChanges = function (changes) {\n        if (changes.uploadedFiles && changes.uploadedFiles.currentValue.length > 0) {\n            this.processUploadedFiles();\n        }\n    };\n    ImageUploadComponent.prototype.onFileChange = function (files) {\n        if (this.disabled)\n            return;\n        var remainingSlots = this.countRemainingSlots();\n        var filesToUploadNum = files.length > remainingSlots ? remainingSlots : files.length;\n        if (this.url && filesToUploadNum != 0) {\n            this.uploadStateChanged.emit(true);\n        }\n        this.fileCounter += filesToUploadNum;\n        this.showFileTooLargeMessage = false;\n        this.uploadFiles(files, filesToUploadNum);\n    };\n    ImageUploadComponent.prototype.onResponse = function (response, fileHolder) {\n        fileHolder.serverResponse = { status: response.status, response: response };\n        fileHolder.pending = false;\n        this.uploadFinished.emit(fileHolder);\n        if (--this.pendingFilesCounter == 0) {\n            this.uploadStateChanged.emit(false);\n        }\n    };\n    ImageUploadComponent.prototype.processUploadedFiles = function () {\n        for (var i = 0; i < this.uploadedFiles.length; i++) {\n            var data = this.uploadedFiles[i];\n            var fileBlob = void 0, file = void 0, fileUrl = void 0;\n            if (data instanceof Object) {\n                fileUrl = data.url;\n                fileBlob = (data.blob) ? data.blob : new Blob([data]);\n                file = new File([fileBlob], data.fileName);\n            }\n            else {\n                fileUrl = data;\n                fileBlob = new Blob([fileUrl]);\n                file = new File([fileBlob], fileUrl);\n            }\n            this.files.push(new FileHolder(fileUrl, file));\n        }\n    };\n    ImageUploadComponent.prototype.uploadFiles = function (files, filesToUploadNum) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var _loop_1, this_1, i;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _loop_1 = function (i) {\n                            var file, beforeUploadResult, img, reader;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        file = files[i];\n                                        if (this_1.maxFileSize && file.size > this_1.maxFileSize) {\n                                            this_1.fileCounter--;\n                                            this_1.inputElement.nativeElement.value = '';\n                                            this_1.showFileTooLargeMessage = true;\n                                            return [2 /*return*/, \"continue\"];\n                                        }\n                                        return [4 /*yield*/, this_1.beforeUpload({ file: file, url: this_1.url, abort: false })];\n                                    case 1:\n                                        beforeUploadResult = _a.sent();\n                                        if (beforeUploadResult.abort) {\n                                            this_1.fileCounter--;\n                                            this_1.inputElement.nativeElement.value = '';\n                                            return [2 /*return*/, \"continue\"];\n                                        }\n                                        img = document.createElement('img');\n                                        img.src = window.URL.createObjectURL(beforeUploadResult.file);\n                                        reader = new FileReader();\n                                        reader.addEventListener('load', function (event) {\n                                            var fileHolder = new FileHolder(event.target.result, beforeUploadResult.file);\n                                            _this.uploadSingleFile(fileHolder, beforeUploadResult.url, beforeUploadResult.formData);\n                                            _this.files.push(fileHolder);\n                                        }, false);\n                                        reader.readAsDataURL(beforeUploadResult.file);\n                                        return [2 /*return*/];\n                                }\n                            });\n                        };\n                        this_1 = this;\n                        i = 0;\n                        _a.label = 1;\n                    case 1:\n                        if (!(i < filesToUploadNum))\n                            return [3 /*break*/, 4];\n                        return [5 /*yield**/, _loop_1(i)];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        i++;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ImageUploadComponent.prototype.uploadSingleFile = function (fileHolder, url, customForm) {\n        var _this = this;\n        if (url === void 0) {\n            url = this.url;\n        }\n        if (url) {\n            this.pendingFilesCounter++;\n            fileHolder.pending = true;\n            this.imageService\n                .postImage(url, fileHolder.file, this.headers, this.partName, customForm, this.withCredentials)\n                .subscribe(function (response) { return _this.onResponse(response, fileHolder); }, function (error) {\n                _this.onResponse(error, fileHolder);\n                _this.deleteFile(fileHolder);\n            });\n        }\n        else {\n            this.uploadFinished.emit(fileHolder);\n        }\n    };\n    ImageUploadComponent.decorators = [\n        { type: core_1.Component, args: [{\n                    selector: 'image-upload',\n                    template: \"\\n    <div\\n         fileDrop\\n         [accept]=\\\"supportedExtensions\\\"\\n         (fileOver)=\\\"onFileOver($event)\\\"\\n         (fileDrop)=\\\"onFileChange($event)\\\"\\n         [ngClass]=\\\"cssClass\\\"\\n         [ngClass]=\\\"{'img-ul-file-is-over': fileOver}\\\"     \\n         [ngStyle]=\\\"style?.layout\\\"\\n    >\\n      <div class=\\\"img-ul-file-upload img-ul-hr-inline-group\\\">    \\n        <label *ngIf=\\\"fileCounter != max\\\"\\n          class=\\\"img-ul-upload img-ul-button\\\" \\n          [ngStyle]=\\\"style?.selectButton\\\"\\n          [ngClass]=\\\"{'img-ul-disabled': disabled}\\\">\\n          <span [innerText]=\\\"buttonCaption\\\"></span>\\n          <input\\n            type=\\\"file\\\"\\n            [disabled]=\\\"disabled\\\"\\n            [accept]=\\\"supportedExtensions\\\"\\n            multiple (change)=\\\"onFileChange(input.files)\\\"\\n            #input>\\n        </label>\\n        <button *ngIf=\\\"fileCounter > 0\\\"\\n          [disabled]=\\\"disabled\\\"\\n          class=\\\"img-ul-clear img-ul-button\\\" \\n          (click)=\\\"deleteAll()\\\" \\n          [ngStyle]=\\\"style?.clearButton\\\"\\n          [innerText]=\\\"clearButtonCaption\\\">\\n        </button>\\n        <div class=\\\"img-ul-drag-box-msg\\\" [innerText]=\\\"dropBoxMessage\\\"></div>\\n      </div>\\n\\n      <p class=\\\"img-ul-file-too-large\\\" *ngIf=\\\"showFileTooLargeMessage\\\" [innerText]=\\\"fileTooLargeMessage\\\"></p>\\n\\n      <div *ngIf=\\\"preview\\\" class=\\\"img-ul-container img-ul-hr-inline-group\\\" [ngStyle]=\\\"style?.previewPanel\\\">\\n        <div\\n          class=\\\"img-ul-image\\\"\\n          *ngFor=\\\"let file of files\\\"\\n          (click)=\\\"previewFileClicked(file)\\\"\\n          [ngStyle]=\\\"{'background-image': 'url('+ file.src +')'}\\\"\\n        >\\n          <div *ngIf=\\\"file.pending\\\" class=\\\"img-ul-loading-overlay\\\">\\n            <div class=\\\"img-ul-spinning-circle\\\"></div>\\n          </div>\\n          <div *ngIf=\\\"!file.pending\\\" \\n            [ngClass]=\\\"{'img-ul-disabled': disabled}\\\" \\n            class=\\\"img-ul-x-mark\\\" \\n            (click)=\\\"deleteFile(file)\\\">\\n            <span class=\\\"img-ul-close\\\"></span>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  \",\n                    styles: [\"\\n    .img-ul {\\n        --active-color: #3C9;\\n        --common-radius: 3px;\\n        background-color: #f8f8f8;\\n        border-radius: var(--common-radius);\\n        border: #d0d0d0 dashed 1px;\\n        font-family: sans-serif;\\n        position: relative;\\n        color: #9b9b9b;\\n    }\\n\\n    .img-ul-file-is-over {\\n        border: var(--active-color) solid;\\n    }\\n\\n    .img-ul-hr-inline-group:after {\\n        clear: both;\\n        content: \\\"\\\";\\n        display: table;\\n    }\\n\\n    .img-ul-file-upload {    \\n        padding: 16px;\\n    }\\n\\n    .img-ul-drag-box-msg {    \\n        display: inline-block;\\n        font-weight: 600;\\n        margin-left: 12px;\\n        padding-top: 14px;\\n    }\\n\\n    label.img-ul-button input[type=file] {\\n        display: none;\\n        position: fixed;\\n        top: -99999px;\\n    }\\n\\n    .img-ul-clear {\\n        background-color: #FF0000;\\n    }\\n\\n    .img-ul-clear:disabled {\\n        background-color: #FF6464;\\n        cursor: default;\\n    }\\n\\n    .img-ul-upload {\\n        background-color: var(--active-color);\\n    }\\n\\n    .img-ul-button {\\n        -moz-box-shadow: 2px 2px 4px 0 rgba(148, 148, 148, 0.6);\\n        -webkit-box-shadow: 2px 2px 4px 0 rgba(148, 148, 148, 0.6);\\n        border: none;\\n        box-shadow: 2px 2px 4px 0 rgba(148, 148, 148, 0.6);\\n        color: #FFF;\\n        cursor: pointer;\\n        display: inline-block;\\n        float: left;\\n        font-size: 1.25em;\\n        font-weight: 500;\\n        padding: 10px;\\n        text-transform: uppercase;\\n    }\\n\\n    .img-ul-button:active span {\\n        display: block;\\n        position: relative;\\n        top: 1px;\\n    }\\n\\n    .img-ul-container {\\n        background-color: #fdfdfd;\\n        padding: 0 10px;\\n    }\\n\\n    .img-ul-image {    \\n        background: center center no-repeat;\\n        background-size: contain;\\n        display: inline-block;\\n        float: left;\\n        height: 86px;\\n        margin: 6px;\\n        position: relative;\\n        width: 86px;\\n    }\\n\\n    .img-ul-x-mark {\\n        background-color: #000;\\n        border-radius: 2px;\\n        color: #FFF;\\n        cursor: pointer;\\n        float: right;\\n        height: 20px;\\n        margin: 2px;\\n        opacity: .7;\\n        text-align: center;\\n        width: 20px;\\n    }\\n\\n    .img-ul-close {\\n        height: 20px;\\n        opacity: .7;\\n        padding-right: 3px;\\n        position: relative;\\n        width: 20px;\\n    }\\n\\n    .img-ul-x-mark:hover .img-ul-close {\\n        opacity: 1;\\n    }\\n\\n    .img-ul-close:before, .img-ul-close:after {\\n        background-color: #FFF;\\n        border-radius: 2px;\\n        content: '';\\n        height: 15px;\\n        position: absolute;\\n        top: 0;\\n        width: 2px;\\n    }\\n\\n    .img-ul-close:before {\\n        transform: rotate(45deg);\\n    }\\n\\n    .img-ul-close:after {\\n        transform: rotate(-45deg);\\n    }\\n\\n    .img-ul-x-mark.img-ul-disabled {\\n        display: none;\\n    }\\n\\n    .img-ul-loading-overlay {\\n        background-color: #000;\\n        bottom: 0;\\n        left: 0;\\n        opacity: .7;\\n        position: absolute;\\n        right: 0;\\n        top: 0;\\n    }\\n\\n    .img-ul-spinning-circle {\\n        height: 30px;\\n        width: 30px;\\n        margin: auto;\\n        position: absolute;\\n        top: 0;\\n        left: 0;\\n        bottom: 0;\\n        right: 0;\\n        border-radius: 50%;\\n        border: 3px solid rgba(255, 255, 255, 0);\\n        border-top: 3px solid #FFF;\\n        border-right: 3px solid #FFF;\\n        -webkit-animation: spinner 2s infinite cubic-bezier(0.085, 0.625, 0.855, 0.360);\\n        animation: spinner 2s infinite cubic-bezier(0.085, 0.625, 0.855, 0.360);\\n    }\\n\\n    .img-ul-file-too-large {\\n        color: red;\\n        padding: 0 15px;\\n    }\\n\\n    .img-ul-upload.img-ul-disabled {\\n        background-color: #86E9C9;\\n        cursor: default;\\n    }\\n\\n    .img-ul-upload.img-ul-disabled:active span {\\n        top: 0px;\\n    }\\n\\n    @-webkit-keyframes spinner {\\n      0% {\\n        -webkit-transform: rotate(0deg);\\n        transform: rotate(0deg);\\n      }\\n\\n      100% {\\n        -webkit-transform: rotate(360deg);\\n        transform: rotate(360deg);\\n      }\\n    }\\n\\n    @keyframes spinner {\\n      0% {\\n        -webkit-transform: rotate(0deg);\\n        transform: rotate(0deg);\\n      }\\n\\n      100% {\\n        -webkit-transform: rotate(360deg);\\n        transform: rotate(360deg);\\n      }\\n    }\\n  \"]\n                },] },\n    ];\n    ImageUploadComponent.propDecorators = {\n        'beforeUpload': [{ type: core_1.Input },],\n        'buttonCaption': [{ type: core_1.Input },],\n        'disabled': [{ type: core_1.Input },],\n        'cssClass': [{ type: core_1.Input, args: ['class',] },],\n        'clearButtonCaption': [{ type: core_1.Input },],\n        'dropBoxMessage': [{ type: core_1.Input },],\n        'fileTooLargeMessage': [{ type: core_1.Input },],\n        'headers': [{ type: core_1.Input },],\n        'max': [{ type: core_1.Input },],\n        'maxFileSize': [{ type: core_1.Input },],\n        'preview': [{ type: core_1.Input },],\n        'partName': [{ type: core_1.Input },],\n        'style': [{ type: core_1.Input },],\n        'supportedExtensions': [{ type: core_1.Input, args: ['extensions',] },],\n        'url': [{ type: core_1.Input },],\n        'withCredentials': [{ type: core_1.Input },],\n        'uploadedFiles': [{ type: core_1.Input },],\n        'removed': [{ type: core_1.Output },],\n        'uploadStateChanged': [{ type: core_1.Output },],\n        'uploadFinished': [{ type: core_1.Output },],\n        'previewClicked': [{ type: core_1.Output },],\n        'inputElement': [{ type: core_1.ViewChild, args: ['input',] },],\n    };\n    return ImageUploadComponent;\n}());\nexports.ImageUploadComponent = ImageUploadComponent;\n",null]}