{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 5efb8c25eb2acb04be5a","webpack:///./build/out-tsc/lib-es5/src/ngx-lazy-load-images.directive.js","webpack:///external \"@angular/core\"","webpack:///./build/out-tsc/lib-es5/ngx-lazy-load-images.js","webpack:///external \"@angular/common\"","webpack:///./node_modules/intersection-observer/intersection-observer.js","webpack:///./build/out-tsc/lib-es5/src/ngx-lazy-load-images.module.js"],"names":["root","factory","exports","module","require","define","amd","a","i","self","this","__WEBPACK_EXTERNAL_MODULE_1__","__WEBPACK_EXTERNAL_MODULE_4__","__webpack_require__","moduleId","installedModules","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","LazyLoadImagesDirective","element","renderer","ngZone","platformId","rootElement","nativeElement","init","_this","registerIntersectionObserver","observeDOMChanges","getAllImagesToLazyLoad","forEach","image","intersectionObserver","observe","ngOnInit","isBrowser","runOutsideAngular","ngOnDestroy","disconnect","__WEBPACK_IMPORTED_MODULE_1__angular_common__","IntersectionObserver","images","onIntersectionChange","intersectionObserverConfig","undefined","onChange","observer","MutationObserver","mutations","attributes","characterData","childList","subtree","pageNode","Array","from","querySelectorAll","isIntersecting","onImageAppearsInViewport","target","dataset","src","setAttribute","removeAttribute","srcset","backgroundSrc","setStyle","unobserve","decorators","type","__WEBPACK_IMPORTED_MODULE_0__angular_core__","args","selector","ctorParameters","propDecorators","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_0__index__","window","document","IntersectionObserverEntry","entry","time","rootBounds","boundingClientRect","intersectionRect","top","bottom","left","right","width","height","targetRect","targetArea","intersectionArea","intersectionRatio","callback","opt_options","options","Error","nodeType","_checkForIntersections","fn","timeout","timer","setTimeout","throttle","bind","THROTTLE_TIMEOUT","_callback","_observationTargets","_queuedEntries","_rootMarginValues","_parseRootMargin","rootMargin","thresholds","_initThresholds","threshold","map","margin","value","unit","join","addEvent","node","event","opt_useCapture","addEventListener","attachEvent","removeEvent","removeEventListener","detatchEvent","getBoundingClientRect","el","rect","err","containsDeep","parent","child","getParentNode","parentNode","host","registry","POLL_INTERVAL","some","item","_registerInstance","push","_monitorIntersections","filter","length","_unmonitorIntersections","_unregisterInstance","takeRecords","records","slice","opt_threshold","isArray","sort","t","isNaN","opt_rootMargin","margins","split","parts","exec","parseFloat","_monitoringIntersections","_monitoringInterval","setInterval","_domObserver","clearInterval","rootIsInDom","_rootIsInDom","rootRect","_getRootRect","rootContainsTarget","_rootContainsTarget","oldEntry","_computeTargetAndRootIntersection","newEntry","performance","now","_hasCrossedThreshold","getComputedStyle","display","atRoot","parentRect","parentComputedStyle","body","documentElement","overflow","rect1","rect2","Math","max","min","computeRectIntersection","html","clientWidth","clientHeight","_expandRectByRootMargin","newRect","oldRatio","newRatio","indexOf","index","splice","LazyLoadImagesModule","declarations","__WEBPACK_IMPORTED_MODULE_1__ngx_lazy_load_images_directive__"],"mappings":"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","file":"ngx-lazy-load-images.umd.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@angular/core\"), require(\"@angular/common\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@angular/core\", \"@angular/common\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"@angular/core\"), require(\"@angular/common\")) : factory(root[\"@angular/core\"], root[\"@angular/common\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_4__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5efb8c25eb2acb04be5a","import { Directive, ElementRef, Renderer2, Input, NgZone, Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n/**\n * Angular Lazy Loading Images Directive\n *\n * The library allows to lazy load images from your web application\n * using the MutationObserver and the IntersectionObserver. Images will be loaded as\n * soon as they enter the viewport in a non-blocking way.\n */\nvar LazyLoadImagesDirective = (function () {\n    /**\n     * @param {?} element\n     * @param {?} renderer\n     * @param {?} ngZone\n     * @param {?} platformId\n     */\n    function LazyLoadImagesDirective(element, renderer, ngZone, platformId) {\n        this.renderer = renderer;\n        this.ngZone = ngZone;\n        this.platformId = platformId;\n        this.rootElement = element.nativeElement;\n    }\n    /**\n     * @return {?}\n     */\n    LazyLoadImagesDirective.prototype.init = function () {\n        var _this = this;\n        this.registerIntersectionObserver();\n        this.observeDOMChanges(this.rootElement, function () {\n            var /** @type {?} */ imagesFoundInDOM = _this.getAllImagesToLazyLoad(_this.rootElement);\n            imagesFoundInDOM.forEach(function (image) { return _this.intersectionObserver.observe(image); });\n        });\n    };\n    /**\n     * @return {?}\n     */\n    LazyLoadImagesDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        if (!this.isBrowser()) {\n            return;\n        }\n        require('intersection-observer');\n        this.ngZone.runOutsideAngular(function () { return _this.init(); });\n    };\n    /**\n     * @return {?}\n     */\n    LazyLoadImagesDirective.prototype.ngOnDestroy = function () {\n        if (this.intersectionObserver) {\n            this.intersectionObserver.disconnect();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    LazyLoadImagesDirective.prototype.isBrowser = function () {\n        return isPlatformBrowser(this.platformId);\n    };\n    /**\n     * @return {?}\n     */\n    LazyLoadImagesDirective.prototype.registerIntersectionObserver = function () {\n        var _this = this;\n        this.intersectionObserver = new IntersectionObserver(function (images) { return images.forEach(function (image) { return _this.onIntersectionChange(image); }); }, this.intersectionObserverConfig instanceof Object ? this.intersectionObserverConfig : undefined);\n        return this.intersectionObserver;\n    };\n    /**\n     * @param {?} rootElement\n     * @param {?} onChange\n     * @return {?}\n     */\n    LazyLoadImagesDirective.prototype.observeDOMChanges = function (rootElement, onChange) {\n        // Create a Mutation Observer instance\n        var /** @type {?} */ observer = new MutationObserver(function (mutations) { return onChange(mutations); });\n        // Observer Configuration\n        var /** @type {?} */ observerConfig = {\n            attributes: true,\n            characterData: true,\n            childList: true,\n            subtree: true\n        };\n        // Observe Directive DOM Node\n        observer.observe(rootElement, observerConfig);\n        // Fire onChange callback to check current DOM nodes\n        onChange();\n        return observer;\n    };\n    /**\n     * @param {?} pageNode\n     * @return {?}\n     */\n    LazyLoadImagesDirective.prototype.getAllImagesToLazyLoad = function (pageNode) {\n        return Array.from(pageNode.querySelectorAll('img[data-src], [data-srcset], [data-background-src]'));\n    };\n    /**\n     * @param {?} image\n     * @return {?}\n     */\n    LazyLoadImagesDirective.prototype.onIntersectionChange = function (image) {\n        if (!image.isIntersecting) {\n            return;\n        }\n        this.onImageAppearsInViewport(image.target);\n    };\n    /**\n     * @param {?} image\n     * @return {?}\n     */\n    LazyLoadImagesDirective.prototype.onImageAppearsInViewport = function (image) {\n        if (image.dataset.src) {\n            this.renderer.setAttribute(image, 'src', image.dataset.src);\n            this.renderer.removeAttribute(image, 'data-src');\n        }\n        if (image.dataset.srcset) {\n            this.renderer.setAttribute(image, 'srcset', image.dataset.srcset);\n            this.renderer.removeAttribute(image, 'data-srcset');\n        }\n        if (image.dataset.backgroundSrc) {\n            this.renderer.setStyle(image, 'background-image', \"url(\" + image.dataset.backgroundSrc + \")\");\n            this.renderer.removeAttribute(image, 'data-background-src');\n        }\n        // Stop observing the current target\n        if (this.intersectionObserver) {\n            this.intersectionObserver.unobserve(image);\n        }\n    };\n    return LazyLoadImagesDirective;\n}());\nexport { LazyLoadImagesDirective };\nLazyLoadImagesDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[lazy-load-images]'\n            },] },\n];\n/**\n * @nocollapse\n */\nLazyLoadImagesDirective.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: Renderer2, },\n    { type: NgZone, },\n    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },\n]; };\nLazyLoadImagesDirective.propDecorators = {\n    'intersectionObserverConfig': [{ type: Input, args: ['lazy-load-images',] },],\n};\nfunction LazyLoadImagesDirective_tsickle_Closure_declarations() {\n    /** @type {?} */\n    LazyLoadImagesDirective.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    LazyLoadImagesDirective.ctorParameters;\n    /** @type {?} */\n    LazyLoadImagesDirective.propDecorators;\n    /** @type {?} */\n    LazyLoadImagesDirective.prototype.intersectionObserverConfig;\n    /** @type {?} */\n    LazyLoadImagesDirective.prototype.intersectionObserver;\n    /** @type {?} */\n    LazyLoadImagesDirective.prototype.rootElement;\n    /** @type {?} */\n    LazyLoadImagesDirective.prototype.renderer;\n    /** @type {?} */\n    LazyLoadImagesDirective.prototype.ngZone;\n    /** @type {?} */\n    LazyLoadImagesDirective.prototype.platformId;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./build/out-tsc/lib-es5/src/ngx-lazy-load-images.directive.js\n// module id = 0\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/core\"\n// module id = 1\n// module chunks = 0","/**\n * Generated bundle index. Do not edit.\n */\nexport { LazyLoadImagesDirective, LazyLoadImagesModule } from './index';\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./build/out-tsc/lib-es5/ngx-lazy-load-images.js\n// module id = 2\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/common\"\n// module id = 4\n// module chunks = 0","/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n * \n */\n\n(function(window, document) {\n'use strict';\n\n\n// Exits early if all IntersectionObserver and IntersectionObserverEntry\n// features are natively supported.\nif ('IntersectionObserver' in window &&\n    'IntersectionObserverEntry' in window &&\n    'intersectionRatio' in window.IntersectionObserverEntry.prototype) {\n\n  // Minimal polyfill for Edge 15's lack of `isIntersecting`\n  // See: https://github.com/w3c/IntersectionObserver/issues/211\n  if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {\n    Object.defineProperty(window.IntersectionObserverEntry.prototype,\n      'isIntersecting', {\n      get: function () {\n        return this.intersectionRatio > 0;\n      }\n    });\n  }\n  return;\n}\n\n\n/**\n * An IntersectionObserver registry. This registry exists to hold a strong\n * reference to IntersectionObserver instances currently observering a target\n * element. Without this registry, instances without another reference may be\n * garbage collected.\n */\nvar registry = [];\n\n\n/**\n * Creates the global IntersectionObserverEntry constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry\n * @param {Object} entry A dictionary of instance properties.\n * @constructor\n */\nfunction IntersectionObserverEntry(entry) {\n  this.time = entry.time;\n  this.target = entry.target;\n  this.rootBounds = entry.rootBounds;\n  this.boundingClientRect = entry.boundingClientRect;\n  this.intersectionRect = entry.intersectionRect || getEmptyRect();\n  this.isIntersecting = !!entry.intersectionRect;\n\n  // Calculates the intersection ratio.\n  var targetRect = this.boundingClientRect;\n  var targetArea = targetRect.width * targetRect.height;\n  var intersectionRect = this.intersectionRect;\n  var intersectionArea = intersectionRect.width * intersectionRect.height;\n\n  // Sets intersection ratio.\n  if (targetArea) {\n    this.intersectionRatio = intersectionArea / targetArea;\n  } else {\n    // If area is zero and is intersecting, sets to 1, otherwise to 0\n    this.intersectionRatio = this.isIntersecting ? 1 : 0;\n  }\n}\n\n\n/**\n * Creates the global IntersectionObserver constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface\n * @param {Function} callback The function to be invoked after intersection\n *     changes have queued. The function is not invoked if the queue has\n *     been emptied by calling the `takeRecords` method.\n * @param {Object=} opt_options Optional configuration options.\n * @constructor\n */\nfunction IntersectionObserver(callback, opt_options) {\n\n  var options = opt_options || {};\n\n  if (typeof callback != 'function') {\n    throw new Error('callback must be a function');\n  }\n\n  if (options.root && options.root.nodeType != 1) {\n    throw new Error('root must be an Element');\n  }\n\n  // Binds and throttles `this._checkForIntersections`.\n  this._checkForIntersections = throttle(\n      this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT);\n\n  // Private properties.\n  this._callback = callback;\n  this._observationTargets = [];\n  this._queuedEntries = [];\n  this._rootMarginValues = this._parseRootMargin(options.rootMargin);\n\n  // Public properties.\n  this.thresholds = this._initThresholds(options.threshold);\n  this.root = options.root || null;\n  this.rootMargin = this._rootMarginValues.map(function(margin) {\n    return margin.value + margin.unit;\n  }).join(' ');\n}\n\n\n/**\n * The minimum interval within which the document will be checked for\n * intersection changes.\n */\nIntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;\n\n\n/**\n * The frequency in which the polyfill polls for intersection changes.\n * this can be updated on a per instance basis and must be set prior to\n * calling `observe` on the first target.\n */\nIntersectionObserver.prototype.POLL_INTERVAL = null;\n\n\n/**\n * Starts observing a target element for intersection changes based on\n * the thresholds values.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.observe = function(target) {\n  // If the target is already being observed, do nothing.\n  if (this._observationTargets.some(function(item) {\n    return item.element == target;\n  })) {\n    return;\n  }\n\n  if (!(target && target.nodeType == 1)) {\n    throw new Error('target must be an Element');\n  }\n\n  this._registerInstance();\n  this._observationTargets.push({element: target, entry: null});\n  this._monitorIntersections();\n  this._checkForIntersections();\n};\n\n\n/**\n * Stops observing a target element for intersection changes.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.unobserve = function(target) {\n  this._observationTargets =\n      this._observationTargets.filter(function(item) {\n\n    return item.element != target;\n  });\n  if (!this._observationTargets.length) {\n    this._unmonitorIntersections();\n    this._unregisterInstance();\n  }\n};\n\n\n/**\n * Stops observing all target elements for intersection changes.\n */\nIntersectionObserver.prototype.disconnect = function() {\n  this._observationTargets = [];\n  this._unmonitorIntersections();\n  this._unregisterInstance();\n};\n\n\n/**\n * Returns any queue entries that have not yet been reported to the\n * callback and clears the queue. This can be used in conjunction with the\n * callback to obtain the absolute most up-to-date intersection information.\n * @return {Array} The currently queued entries.\n */\nIntersectionObserver.prototype.takeRecords = function() {\n  var records = this._queuedEntries.slice();\n  this._queuedEntries = [];\n  return records;\n};\n\n\n/**\n * Accepts the threshold value from the user configuration object and\n * returns a sorted array of unique threshold values. If a value is not\n * between 0 and 1 and error is thrown.\n * @private\n * @param {Array|number=} opt_threshold An optional threshold value or\n *     a list of threshold values, defaulting to [0].\n * @return {Array} A sorted list of unique and valid threshold values.\n */\nIntersectionObserver.prototype._initThresholds = function(opt_threshold) {\n  var threshold = opt_threshold || [0];\n  if (!Array.isArray(threshold)) threshold = [threshold];\n\n  return threshold.sort().filter(function(t, i, a) {\n    if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {\n      throw new Error('threshold must be a number between 0 and 1 inclusively');\n    }\n    return t !== a[i - 1];\n  });\n};\n\n\n/**\n * Accepts the rootMargin value from the user configuration object\n * and returns an array of the four margin values as an object containing\n * the value and unit properties. If any of the values are not properly\n * formatted or use a unit other than px or %, and error is thrown.\n * @private\n * @param {string=} opt_rootMargin An optional rootMargin value,\n *     defaulting to '0px'.\n * @return {Array<Object>} An array of margin objects with the keys\n *     value and unit.\n */\nIntersectionObserver.prototype._parseRootMargin = function(opt_rootMargin) {\n  var marginString = opt_rootMargin || '0px';\n  var margins = marginString.split(/\\s+/).map(function(margin) {\n    var parts = /^(-?\\d*\\.?\\d+)(px|%)$/.exec(margin);\n    if (!parts) {\n      throw new Error('rootMargin must be specified in pixels or percent');\n    }\n    return {value: parseFloat(parts[1]), unit: parts[2]};\n  });\n\n  // Handles shorthand.\n  margins[1] = margins[1] || margins[0];\n  margins[2] = margins[2] || margins[0];\n  margins[3] = margins[3] || margins[1];\n\n  return margins;\n};\n\n\n/**\n * Starts polling for intersection changes if the polling is not already\n * happening, and if the page's visibilty state is visible.\n * @private\n */\nIntersectionObserver.prototype._monitorIntersections = function() {\n  if (!this._monitoringIntersections) {\n    this._monitoringIntersections = true;\n\n    // If a poll interval is set, use polling instead of listening to\n    // resize and scroll events or DOM mutations.\n    if (this.POLL_INTERVAL) {\n      this._monitoringInterval = setInterval(\n          this._checkForIntersections, this.POLL_INTERVAL);\n    }\n    else {\n      addEvent(window, 'resize', this._checkForIntersections, true);\n      addEvent(document, 'scroll', this._checkForIntersections, true);\n\n      if ('MutationObserver' in window) {\n        this._domObserver = new MutationObserver(this._checkForIntersections);\n        this._domObserver.observe(document, {\n          attributes: true,\n          childList: true,\n          characterData: true,\n          subtree: true\n        });\n      }\n    }\n  }\n};\n\n\n/**\n * Stops polling for intersection changes.\n * @private\n */\nIntersectionObserver.prototype._unmonitorIntersections = function() {\n  if (this._monitoringIntersections) {\n    this._monitoringIntersections = false;\n\n    clearInterval(this._monitoringInterval);\n    this._monitoringInterval = null;\n\n    removeEvent(window, 'resize', this._checkForIntersections, true);\n    removeEvent(document, 'scroll', this._checkForIntersections, true);\n\n    if (this._domObserver) {\n      this._domObserver.disconnect();\n      this._domObserver = null;\n    }\n  }\n};\n\n\n/**\n * Scans each observation target for intersection changes and adds them\n * to the internal entries queue. If new entries are found, it\n * schedules the callback to be invoked.\n * @private\n */\nIntersectionObserver.prototype._checkForIntersections = function() {\n  var rootIsInDom = this._rootIsInDom();\n  var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();\n\n  this._observationTargets.forEach(function(item) {\n    var target = item.element;\n    var targetRect = getBoundingClientRect(target);\n    var rootContainsTarget = this._rootContainsTarget(target);\n    var oldEntry = item.entry;\n    var intersectionRect = rootIsInDom && rootContainsTarget &&\n        this._computeTargetAndRootIntersection(target, rootRect);\n\n    var newEntry = item.entry = new IntersectionObserverEntry({\n      time: now(),\n      target: target,\n      boundingClientRect: targetRect,\n      rootBounds: rootRect,\n      intersectionRect: intersectionRect\n    });\n\n    if (!oldEntry) {\n      this._queuedEntries.push(newEntry);\n    } else if (rootIsInDom && rootContainsTarget) {\n      // If the new entry intersection ratio has crossed any of the\n      // thresholds, add a new entry.\n      if (this._hasCrossedThreshold(oldEntry, newEntry)) {\n        this._queuedEntries.push(newEntry);\n      }\n    } else {\n      // If the root is not in the DOM or target is not contained within\n      // root but the previous entry for this target had an intersection,\n      // add a new record indicating removal.\n      if (oldEntry && oldEntry.isIntersecting) {\n        this._queuedEntries.push(newEntry);\n      }\n    }\n  }, this);\n\n  if (this._queuedEntries.length) {\n    this._callback(this.takeRecords(), this);\n  }\n};\n\n\n/**\n * Accepts a target and root rect computes the intersection between then\n * following the algorithm in the spec.\n * TODO(philipwalton): at this time clip-path is not considered.\n * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo\n * @param {Element} target The target DOM element\n * @param {Object} rootRect The bounding rect of the root after being\n *     expanded by the rootMargin value.\n * @return {?Object} The final intersection rect object or undefined if no\n *     intersection is found.\n * @private\n */\nIntersectionObserver.prototype._computeTargetAndRootIntersection =\n    function(target, rootRect) {\n\n  // If the element isn't displayed, an intersection can't happen.\n  if (window.getComputedStyle(target).display == 'none') return;\n\n  var targetRect = getBoundingClientRect(target);\n  var intersectionRect = targetRect;\n  var parent = getParentNode(target);\n  var atRoot = false;\n\n  while (!atRoot) {\n    var parentRect = null;\n    var parentComputedStyle = parent.nodeType == 1 ?\n        window.getComputedStyle(parent) : {};\n\n    // If the parent isn't displayed, an intersection can't happen.\n    if (parentComputedStyle.display == 'none') return;\n\n    if (parent == this.root || parent == document) {\n      atRoot = true;\n      parentRect = rootRect;\n    } else {\n      // If the element has a non-visible overflow, and it's not the <body>\n      // or <html> element, update the intersection rect.\n      // Note: <body> and <html> cannot be clipped to a rect that's not also\n      // the document rect, so no need to compute a new intersection.\n      if (parent != document.body &&\n          parent != document.documentElement &&\n          parentComputedStyle.overflow != 'visible') {\n        parentRect = getBoundingClientRect(parent);\n      }\n    }\n\n    // If either of the above conditionals set a new parentRect,\n    // calculate new intersection data.\n    if (parentRect) {\n      intersectionRect = computeRectIntersection(parentRect, intersectionRect);\n\n      if (!intersectionRect) break;\n    }\n    parent = getParentNode(parent);\n  }\n  return intersectionRect;\n};\n\n\n/**\n * Returns the root rect after being expanded by the rootMargin value.\n * @return {Object} The expanded root rect.\n * @private\n */\nIntersectionObserver.prototype._getRootRect = function() {\n  var rootRect;\n  if (this.root) {\n    rootRect = getBoundingClientRect(this.root);\n  } else {\n    // Use <html>/<body> instead of window since scroll bars affect size.\n    var html = document.documentElement;\n    var body = document.body;\n    rootRect = {\n      top: 0,\n      left: 0,\n      right: html.clientWidth || body.clientWidth,\n      width: html.clientWidth || body.clientWidth,\n      bottom: html.clientHeight || body.clientHeight,\n      height: html.clientHeight || body.clientHeight\n    };\n  }\n  return this._expandRectByRootMargin(rootRect);\n};\n\n\n/**\n * Accepts a rect and expands it by the rootMargin value.\n * @param {Object} rect The rect object to expand.\n * @return {Object} The expanded rect.\n * @private\n */\nIntersectionObserver.prototype._expandRectByRootMargin = function(rect) {\n  var margins = this._rootMarginValues.map(function(margin, i) {\n    return margin.unit == 'px' ? margin.value :\n        margin.value * (i % 2 ? rect.width : rect.height) / 100;\n  });\n  var newRect = {\n    top: rect.top - margins[0],\n    right: rect.right + margins[1],\n    bottom: rect.bottom + margins[2],\n    left: rect.left - margins[3]\n  };\n  newRect.width = newRect.right - newRect.left;\n  newRect.height = newRect.bottom - newRect.top;\n\n  return newRect;\n};\n\n\n/**\n * Accepts an old and new entry and returns true if at least one of the\n * threshold values has been crossed.\n * @param {?IntersectionObserverEntry} oldEntry The previous entry for a\n *    particular target element or null if no previous entry exists.\n * @param {IntersectionObserverEntry} newEntry The current entry for a\n *    particular target element.\n * @return {boolean} Returns true if a any threshold has been crossed.\n * @private\n */\nIntersectionObserver.prototype._hasCrossedThreshold =\n    function(oldEntry, newEntry) {\n\n  // To make comparing easier, an entry that has a ratio of 0\n  // but does not actually intersect is given a value of -1\n  var oldRatio = oldEntry && oldEntry.isIntersecting ?\n      oldEntry.intersectionRatio || 0 : -1;\n  var newRatio = newEntry.isIntersecting ?\n      newEntry.intersectionRatio || 0 : -1;\n\n  // Ignore unchanged ratios\n  if (oldRatio === newRatio) return;\n\n  for (var i = 0; i < this.thresholds.length; i++) {\n    var threshold = this.thresholds[i];\n\n    // Return true if an entry matches a threshold or if the new ratio\n    // and the old ratio are on the opposite sides of a threshold.\n    if (threshold == oldRatio || threshold == newRatio ||\n        threshold < oldRatio !== threshold < newRatio) {\n      return true;\n    }\n  }\n};\n\n\n/**\n * Returns whether or not the root element is an element and is in the DOM.\n * @return {boolean} True if the root element is an element and is in the DOM.\n * @private\n */\nIntersectionObserver.prototype._rootIsInDom = function() {\n  return !this.root || containsDeep(document, this.root);\n};\n\n\n/**\n * Returns whether or not the target element is a child of root.\n * @param {Element} target The target element to check.\n * @return {boolean} True if the target element is a child of root.\n * @private\n */\nIntersectionObserver.prototype._rootContainsTarget = function(target) {\n  return containsDeep(this.root || document, target);\n};\n\n\n/**\n * Adds the instance to the global IntersectionObserver registry if it isn't\n * already present.\n * @private\n */\nIntersectionObserver.prototype._registerInstance = function() {\n  if (registry.indexOf(this) < 0) {\n    registry.push(this);\n  }\n};\n\n\n/**\n * Removes the instance from the global IntersectionObserver registry.\n * @private\n */\nIntersectionObserver.prototype._unregisterInstance = function() {\n  var index = registry.indexOf(this);\n  if (index != -1) registry.splice(index, 1);\n};\n\n\n/**\n * Returns the result of the performance.now() method or null in browsers\n * that don't support the API.\n * @return {number} The elapsed time since the page was requested.\n */\nfunction now() {\n  return window.performance && performance.now && performance.now();\n}\n\n\n/**\n * Throttles a function and delays its executiong, so it's only called at most\n * once within a given time period.\n * @param {Function} fn The function to throttle.\n * @param {number} timeout The amount of time that must pass before the\n *     function can be called again.\n * @return {Function} The throttled function.\n */\nfunction throttle(fn, timeout) {\n  var timer = null;\n  return function () {\n    if (!timer) {\n      timer = setTimeout(function() {\n        fn();\n        timer = null;\n      }, timeout);\n    }\n  };\n}\n\n\n/**\n * Adds an event handler to a DOM node ensuring cross-browser compatibility.\n * @param {Node} node The DOM node to add the event handler to.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to add.\n * @param {boolean} opt_useCapture Optionally adds the even to the capture\n *     phase. Note: this only works in modern browsers.\n */\nfunction addEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.addEventListener == 'function') {\n    node.addEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.attachEvent == 'function') {\n    node.attachEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Removes a previously added event handler from a DOM node.\n * @param {Node} node The DOM node to remove the event handler from.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to remove.\n * @param {boolean} opt_useCapture If the event handler was added with this\n *     flag set to true, it should be set to true here in order to remove it.\n */\nfunction removeEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.removeEventListener == 'function') {\n    node.removeEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.detatchEvent == 'function') {\n    node.detatchEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Returns the intersection between two rect objects.\n * @param {Object} rect1 The first rect.\n * @param {Object} rect2 The second rect.\n * @return {?Object} The intersection rect or undefined if no intersection\n *     is found.\n */\nfunction computeRectIntersection(rect1, rect2) {\n  var top = Math.max(rect1.top, rect2.top);\n  var bottom = Math.min(rect1.bottom, rect2.bottom);\n  var left = Math.max(rect1.left, rect2.left);\n  var right = Math.min(rect1.right, rect2.right);\n  var width = right - left;\n  var height = bottom - top;\n\n  return (width >= 0 && height >= 0) && {\n    top: top,\n    bottom: bottom,\n    left: left,\n    right: right,\n    width: width,\n    height: height\n  };\n}\n\n\n/**\n * Shims the native getBoundingClientRect for compatibility with older IE.\n * @param {Element} el The element whose bounding rect to get.\n * @return {Object} The (possibly shimmed) rect of the element.\n */\nfunction getBoundingClientRect(el) {\n  var rect;\n\n  try {\n    rect = el.getBoundingClientRect();\n  } catch (err) {\n    // Ignore Windows 7 IE11 \"Unspecified error\"\n    // https://github.com/w3c/IntersectionObserver/pull/205\n  }\n\n  if (!rect) return getEmptyRect();\n\n  // Older IE\n  if (!(rect.width && rect.height)) {\n    rect = {\n      top: rect.top,\n      right: rect.right,\n      bottom: rect.bottom,\n      left: rect.left,\n      width: rect.right - rect.left,\n      height: rect.bottom - rect.top\n    };\n  }\n  return rect;\n}\n\n\n/**\n * Returns an empty rect object. An empty rect is returned when an element\n * is not in the DOM.\n * @return {Object} The empty rect.\n */\nfunction getEmptyRect() {\n  return {\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    width: 0,\n    height: 0\n  };\n}\n\n/**\n * Checks to see if a parent element contains a child elemnt (including inside\n * shadow DOM).\n * @param {Node} parent The parent element.\n * @param {Node} child The child element.\n * @return {boolean} True if the parent node contains the child node.\n */\nfunction containsDeep(parent, child) {\n  var node = child;\n  while (node) {\n    if (node == parent) return true;\n\n    node = getParentNode(node);\n  }\n  return false;\n}\n\n\n/**\n * Gets the parent node of an element or its host element if the parent node\n * is a shadow root.\n * @param {Node} node The node whose parent to get.\n * @return {Node|null} The parent node or null if no parent exists.\n */\nfunction getParentNode(node) {\n  var parent = node.parentNode;\n\n  if (parent && parent.nodeType == 11 && parent.host) {\n    // If the parent is a shadow root, return the host element.\n    return parent.host;\n  }\n  return parent;\n}\n\n\n// Exposes the constructors globally.\nwindow.IntersectionObserver = IntersectionObserver;\nwindow.IntersectionObserverEntry = IntersectionObserverEntry;\n\n}(window, document));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/intersection-observer/intersection-observer.js\n// module id = 5\n// module chunks = 0","import { NgModule } from '@angular/core';\nimport { LazyLoadImagesDirective } from './ngx-lazy-load-images.directive';\nvar LazyLoadImagesModule = (function () {\n    function LazyLoadImagesModule() {\n    }\n    return LazyLoadImagesModule;\n}());\nexport { LazyLoadImagesModule };\nLazyLoadImagesModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [LazyLoadImagesDirective],\n                exports: [LazyLoadImagesDirective]\n            },] },\n];\n/**\n * @nocollapse\n */\nLazyLoadImagesModule.ctorParameters = function () { return []; };\nfunction LazyLoadImagesModule_tsickle_Closure_declarations() {\n    /** @type {?} */\n    LazyLoadImagesModule.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    LazyLoadImagesModule.ctorParameters;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./build/out-tsc/lib-es5/src/ngx-lazy-load-images.module.js\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}